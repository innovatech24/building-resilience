@model Resilience.Models.Exercise

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    @{
        ViewBag.title = "Create Tasks for your Goals - Building Resilience";
        Layout = "~/Views/Shared/_Layout.cshtml";
    }

    <!-- Font awesome -->
    <link href="~/Content/font-awesome.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link href="~/Content/bootstrap.css" rel="stylesheet">
    <!-- Slick slider -->
    <link rel="stylesheet" type="text/css" href="~/Content/slick.css">
    <!-- Fancybox slider -->
    <link rel="stylesheet" href="~/Content/jquery.fancybox.css" type="text/css" media="screen" />
    <!-- Theme color -->
    <link id="switcher" href="~/Content/default-theme.css" rel="stylesheet">
    <!-- datepicker -->
    <link href="~/Content/bootstrap-datepicker3.css" rel="stylesheet" />

    <!-- Main style sheet -->
    <link href="~/Content/style.css" rel="stylesheet">

    <!-- Google Fonts -->
    <link href='https://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Roboto:400,400italic,300,300italic,500,700' rel='stylesheet' type='text/css'>
    <style>
        html, body {
            height: 100%;
            width: 100%;
        }

        .col-md-12 {
            min-height: 80%;
            height: auto;
            background: url('../../Images/atmosphere-background-bright-19670.jpg') center;
            background-repeat: repeat-y;
        }
    </style>

    <script type="text/javascript">
        var message = "@TempData["UserMessage"]";
    </script>
</head>
<body>
    <div class="col-md-12">
        <h2>Create tasks for your goal - @ViewBag.goalName</h2>

        <table class="table">
            <thead>
                <tr>
                    <th>
                        @*@Html.DisplayNameFor(model => model.TaskName)*@
                        Task name
                    </th>
                    <th>
                        @*@Html.DisplayNameFor(model => model.TaskDescription)*@
                        Description
                    </th>
                    <th>
                        @*@Html.DisplayNameFor(model => model.DueDate)*@
                        Due date
                    </th>
                    <th></th>
                </tr>
            </thead>

            <tbody>
                <tr>
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <td>
                            <div class="form-group">
                                @*@Html.LabelFor(model => model.TaskName, htmlAttributes: new { @class = "control-label col-md-2" })*@
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.TaskName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.TaskName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </td>

                        <td>
                            <div class="form-group">
                                @*@Html.LabelFor(model => model.TaskDescription, htmlAttributes: new { @class = "control-label col-md-2" })*@
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.TaskDescription, new { htmlAttributes = new { @class = "form-control", rows = "3" } })
                                    @Html.ValidationMessageFor(model => model.TaskDescription, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </td>

                        <td>
                            <div class="form-group">
                                <div class="col-md-10">
                                    <div id="sandbox">
                                        @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "form-control", @onchange = "dateChange(this)" } })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </td>

                        @*<td>
                            <div class="form-group">
                                <div id="remove" hidden>
                                    <input type="button" value="Remove task" class="btnRemove btn btn-danger" />
                                </div>
                            </div>
                        </td>*@
                    }
                </tr>
            </tbody>

            <tfoot>
                <tr>
                    <td>
                        <div class="form-group">
                            <div class="col-md-offset-4 col-md-10">
                                <input type="button" value="Add a task" class="btnAdd btn btn-default" />
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input id="btnSubmit" type="submit" value="Create" class="btn btn-default" />
                            </div>
                        </div>
                    </td>
                </tr>
                <tr>
                    <div id="SubmitMessage" class="alert" hidden>
                    </div>
                </tr>
            </tfoot>

        </table>
        <div class="alert alert-danger alert-dismissible" hidden id="alertIfEmpty">
            <button class="close" type="button" aria-label="close" data-dismiss="alert">×</button>
            <strong>You have to enter a task name and/or a due date for your task.</strong>
        </div>        
    </div>
        @section Scripts{

            <!-- jQuery library -->
            @Scripts.Render("~/bundles/jquery")
            @Scripts.Render("~/bundles/jqueryval")
            <script src="~/Scripts/bootstrap-datepicker.min.js"></script>
            <script>
                $('#sandbox input').datepicker({
                    autoclose: true,
                    todayHighlight: true,
                    format: "dd-M-yyyy",
                    startDate: "today"
                });
            </script>
            <script>
                $(".btnAdd").click(function () {
                    $('#sandbox').datepicker('destroy');
                    var td1 = '<td><div class="form-group"><div class="col-md-10">@Html.EditorFor(modelItem => modelItem.TaskName, new { htmlAttributes = new { @class = "form-control" } })@Html.ValidationMessageFor(model => model.TaskName, "", new { @class = "text-danger" })</div></div></td>';
                    var td2 = '<td><div class="form-group"><div class="col-md-10"><textarea class="form-control text-box multi-line" id="TaskDescription" name="TaskDescription" rows="3"></textarea>@Html.ValidationMessageFor(model => model.TaskDescription, "", new { @class = "text-danger" })</div></div></td>';
                    var td3 = '<td><div class="form-group"><div class="col-md-10"><div id="sandbox">@Html.EditorFor(modelItem => modelItem.DueDate, new { htmlAttributes = new { @class = "form-control", @onchange= "dateChange(this)" } })@Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })</div></div></div></td>';
                    var td4 = '<td><div class="form-group"><div id="remove"><input type="button" value="Remove task" class="btnRemove btn btn-danger" /></div></div></td>';
                    var row = '<tr id="newRow">' + td1 + td2 + td3 + td4 + '</tr>';
                    $("tbody").append(row);
                    $('#sandbox input').datepicker({
                        autoclose: true,
                        todayHighlight: true,
                        format: "dd-M-yyyy"
                    });
                });

                function removeRow() {
                    document.querySelector(#);
                }

                $('.form-group').on('click', '.btnRemove', function () {
                    var trow = $(this).closest('tr');
                    console.log(trow);
                    console.log("wassup");
                    trow.remove();
                });

                function getAllData() {
                    var data = [];
                    $('tbody tr').each(function () {
                        var TaskName = $(this).find('#TaskName').val();                        
                        var TaskDescription = $(this).find('#TaskDescription').val();                        
                        var DueDate = $(this).find('#DueDate').val();                        
                        var GoalsId = '@ViewBag.goalId';
                        var MentorId = '@ViewBag.mentorId';

                        var alldata = {
                            'TaskName': TaskName,
                            'TaskDescription': TaskDescription,
                            'DueDate': DueDate,
                            'GoalsId': GoalsId,
                            'MentorId': MentorId,
                        }
                        //console.log(alldata);
                        if (TaskName != "") {
                            //console.log(TaskName);
                            //console.log(alldata);
                            data.push(alldata);
                        }                        
                    });
                    return data;
                }

                function dateChange(element) {
                    var goalDate = new Date("@ViewBag.DueDate");
                    var taskDate = new Date(element.value);

                    if (taskDate > goalDate) {
                        alert("Task date can't be after goal date");
                        element.value = "";
                        element.focus();
                    };
                };

                $('#btnSubmit').click(function () {
                    var data = JSON.stringify(getAllData());
                    //console.log(data);
                    //console.log(data.length);
                    if (data.length > 2) {
                        $.ajax({
                            url: '/Exercises/Create',
                            type: 'POST',
                            dataType: 'json',
                            contentType: 'application/json; charset=utf-8',
                            data: JSON.stringify({ 'data': data }),
                            success: function () {
                                window.location.replace("/Options/Mentee");
                            },
                            error: function () {
                                window.location.replace("Error/NotFound");
                            }
                        });
                    }
                    else {                        
                        $("#alertIfEmpty").fadeTo(2000, 500).slideUp(500, function () {
                            $("#alertIfEmpty").slideUp(500);
                        });   
                    }
                });
            </script>
        }

            $('#btnSubmit').click(function () {
                var data = JSON.stringify(getAllData());
                //console.log(data);
                $.ajax({
                    url: '/Exercises/Create',
                    type: 'POST',
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify({ 'data': data }),
                    success: function (response) {
                        //window.location.replace("/Options/Mentee");
                        
                        showMessage("SubmitMessage", response, "../../Options/Mentee");
                    },
                    error: function () {
                        window.location.replace("Error/NotFound");
                    }
                });
            });

            
        function showMessage(obj, messageObj, href) {
            if (messageObj != "") {

                // Convert message from the server into json and get div element
                var message = JSON.parse(messageObj.replace(/&quot;/g, '"'));
                var element = document.getElementById(obj);

                // Modify div name with message data
                element.classList.add("alert-" + message.Type);
                var s = document.createElement("strong");
                s.appendChild(document.createTextNode(message.Title));
                element.appendChild(s);
                element.appendChild(document.createTextNode(" " + message.Message));
                element.hidden = false;

                // If success redirect to mentees options
                if (message.Type == "success") {
                    setTimeout(() => { window.location.href = href; }, 1500);
                };
            };
        };
        </script>
    }
</body>
</html>