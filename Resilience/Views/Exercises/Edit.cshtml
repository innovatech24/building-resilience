@model Resilience.Models.Exercise

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    @{
        ViewBag.Title = "Edit tasks - Road to Resilience";
        Layout = "~/Views/Shared/_Layout.cshtml";
    }

    <!-- Font awesome -->
    <link href="~/Content/font-awesome.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link href="~/Content/bootstrap.css" rel="stylesheet">
    <!-- Slick slider -->
    <link rel="stylesheet" type="text/css" href="~/Content/slick.css">
    <!-- Fancybox slider -->
    <link rel="stylesheet" href="~/Content/jquery.fancybox.css" type="text/css" media="screen" />
    <!-- Theme color -->
    <link id="switcher" href="~/Content/default-theme.css" rel="stylesheet">
    <!-- Main style sheet -->
    <link href="~/Content/style.css" rel="stylesheet">
    <!-- datepicker -->
    <link href="~/Content/bootstrap-datepicker3.css" rel="stylesheet" />
    <link rel="stylesheet" type="text/css" href="~/Content/exercise-edit.css">
    <!-- Google Fonts -->
    <link href='https://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Roboto:400,400italic,300,300italic,500,700' rel='stylesheet' type='text/css'>
    <script type="text/javascript">
        var message = "@TempData["UserMessage"]";
        var iid = @Model.GoalsId;
    </script>
</head>
<body>
    <div class="edit-task-page">
        <div class="edit-task-form center-block">
            <h4>Propose change to task</h4>
            <hr />
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <div class="form-group">
                        <div class="col-md-offset-1 col-md-9">
                            <div id="SubmitMessage" style="width:100%;" class="alert" hidden>
                            </div>
                        </div>
                    </div>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.MentorId)
                    @Html.HiddenFor(model => model.CompletionDate)
                    @Html.HiddenFor(model => model.GoalsId)

                    <div class="form-group">
                        @Html.LabelFor(model => model.TaskName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.TaskName, new { htmlAttributes = new { @class = "col-md-offset-1 form-control" } })
                            @Html.ValidationMessageFor(model => model.TaskName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.TaskDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.TaskDescription, new { htmlAttributes = new { @class = "col-md-offset-1 form-control", rows = "3" } })
                            @Html.ValidationMessageFor(model => model.TaskDescription, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*<div class="form-group">
                            @Html.LabelFor(model => model.MentorId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MentorId, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MentorId, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                    <div class="form-group">
                        @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div id="sandbox">
                                @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "col-md-offset-1 form-control", @onchange = "dateChange(this)" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*<div class="form-group">
                            @Html.LabelFor(model => model.CompletionDate, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.CompletionDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CompletionDate, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                    @*<div class="form-group">
                            @Html.LabelFor(model => model.MentorFeedback, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MentorFeedback, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MentorFeedback, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                    @*<div class="form-group">
                            @Html.LabelFor(model => model.MenteeComments, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MenteeComments, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MenteeComments, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                    @*<div class="form-group">
                            @Html.LabelFor(model => model.MenteeRating, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MenteeRating, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MenteeRating, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                    @*<div class="form-group">
                            @Html.LabelFor(model => model.GoalsId, "GoalsId", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("GoalsId", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.GoalsId, "", new { @class = "text-danger" })
                            </div>
                        </div>*@
                    <hr />
                    <div class="form-group">
                        <div class="col-md-offset-1 col-md-10">
                            <input type="submit" value="Save" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    @section Scripts{

        <!-- jQuery library -->
        @Scripts.Render("~/bundles/jquery")
        @Scripts.Render("~/bundles/jqueryval")
        <script src="~/Scripts/bootstrap-datepicker.min.js"></script>
        <script>
            $('#sandbox input').datepicker({
                autoclose: true,
                todayHighlight: true,
                format: "dd-M-yyyy",
                startDate: "today"
            });
            $(document).ready(function () {
    
                showMessage("SubmitMessage", message, "../Index/"+iid);


            });
            function dateChange(element) {
                    var goalDate = new Date("@Model.Goal.DueDate");
                    var taskDate = new Date(element.value);

                    if (taskDate > goalDate) {
                        alert("Task date can't be after goal date");
                        element.value = "";
                        element.focus();
                    };
                };
            function showMessage(obj, messageObj, href) {
            if (messageObj != "") {

                // Convert message from the server into json and get div element
                var message = JSON.parse(messageObj.replace(/&quot;/g, '"'));
                var element = document.getElementById(obj);

                // Modify div name with message data
                element.classList.add("alert-" + message.Type);
                var s = document.createElement("strong");
                s.appendChild(document.createTextNode(message.Title));
                element.appendChild(s);
                element.appendChild(document.createTextNode(" " + message.Message));
                element.hidden = false;

                // If success redirect to mentees options
                if (message.Type == "success") {
                    setTimeout(() => { window.location.href = href; }, 1500);
                };
            };
        };
        </script>
    }

</body>
</html>
