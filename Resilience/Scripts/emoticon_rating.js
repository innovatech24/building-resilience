(function (a) { "use strict"; function b(b, c) { this.element = b, this.settings = a.extend({}, d, c), this.$el = a(b), this.$el.data(name, this), this._defaults = d, this._name = "emotionsRating"; var e = this.$el.data(name + "-opts"); this.opts = a.extend(this._defaults, c, e), this.containerCode = this.$el.attr("id"), this.elementContainer = a(b), this.styleCode = "emotion-style-" + this.containerCode, this.containerCode = "emotion-container-" + this.containerCode, this.code = "emoji-rating-" + this.containerCode, this.clicked = [], this.clicked[this.containerCode] = !1, this.init() } var c, d = { bgEmotion: "happy", count: 5, color: "#d0a658;", emotionSize: 30, inputName: "ratings[]", emotionOnUpdate: null, ratingCode: 5, disabled: !1, useCustomEmotions: !1, transformImages: !1 }, e = { angry: "&#x1F620;", disappointed: "&#x1F61E;", meh: "&#x1F610;", happy: "&#x1F60A;", smile: "&#x1F603;", wink: "&#x1F609;", laughing: "&#x1F606;", inlove: "&#x1F60D;", heart: "&#x2764;", crying: "&#x1F622;", star: "&#x2B50;", poop: "&#x1F4A9;", cat: "&#x1F63A;", like: "&#x1F44D;", dislike: "&#x1F44E;" }; a.extend(b.prototype = { init: function () { c = a(this.element), this.count = 0, this.emotionStyle(), this.renderEmotion(), this.manageHover(), this.manageClick() }, emotionStyle: function () { var a = "." + this.styleCode + "{margin-right:3px;border-radius: 50%;cursor:pointer;opacity:0.3;display: inline-block;font-size:" + this.settings.emotionSize + "px; text-decoration:none;line-height:0.9;text-align: center;color:" + this.settings.color + "}"; c.append("<style>" + a + "</style>") }, renderEmotion: function () { var a = this.settings.count, b = this.settings.useCustomEmotions, d = e[this.settings.bgEmotion]; b && (d = "<img src='" + this.settings.bgEmotion + "' class='custom-" + this.styleCode + "'>"); for (var f, g = "<div class='" + this.containerCode + "'>", h = 1; h <= a; h++)f = "<div class='" + this.styleCode + "' data-index='" + h + "'>" + d + "</div>", g += f; g += "</div>", c.append(g), 0 < this.settings.initialRating ? this.initalRate(this.settings.initialRating) : this.appendInput(), this.settings.transformImages && this.transformImgsToSVG() }, clearEmotion: function (b) { if (!this.settings.disabled) { var c = this.settings.useCustomEmotions, d = e[b]; c && (d = "<img src='" + this.settings.bgEmotion + "' class='custom-" + this.styleCode + "'>"), this.elementContainer.find("." + this.styleCode + "").each(function () { a(this).css("opacity", .3), a(this).html(d) }) } }, showEmotion: function (a) { this.clearEmotion(this.settings.bgEmotion); var b = this.settings.useCustomEmotions, c = f(this.settings.emotions, a, b); b && (c = this.settings.emotions[c], c = "<img src='" + c + "' class='custom-" + this.styleCode + "'>"); for (var d = 0; d < a; d++)this.elementContainer.find("." + this.styleCode + "").eq(d).css("opacity", 1), this.elementContainer.find("." + this.styleCode + "").eq(d).html(c); this.settings.transformImages && this.transformImgsToSVG() }, manageHover: function () { var b = this; b.settings.disabled || b.settings.transformImages || this.elementContainer.on({ mouseenter: function () { var c = parseInt(a(this).data("index"), 10); b.clicked[b.containerCode] || b.showEmotion(c) }, mouseleave: function () { b.clicked[b.containerCode] || b.clearEmotion() } }, "." + this.styleCode + "") }, manageClick: function () { var b = this; b.settings.disabled || this.elementContainer.on("click", "." + this.styleCode + "", function () { var c = a(this).data("index"), d = parseInt(c, 10); b.showEmotion(d), b.count = d, b.clicked[b.containerCode] ? b.updateInput(d) : (b.updateInput(d), b.clicked[b.containerCode] = !0), a.isFunction(b.settings.onUpdate) && b.settings.onUpdate.call(b, d) }) }, initalRate: function (a) { var b = this; b.showEmotion(a), b.clicked[b.containerCode] || (b.appendInput(a), b.clicked[b.containerCode] = !0) }, appendInput: function (a) { var b = ""; a || (b = a); var c = "<input type='hidden' class='" + this.code + "' name='" + this.settings.inputName + "' value='" + b + "' />", d = this.elementContainer; d.append(c) }, updateInput: function (a) { var b = this.elementContainer.find("input." + this.code + ""); b.val(a) }, transformImgsToSVG: function () { this.elementContainer.find("img[src$=\".svg\"]").each(function () { var b = jQuery(this), c = b.attr("src"), d = b.prop("attributes"); a.get(c, function (c) { var e = jQuery(c).find("svg"); e = e.removeAttr("xmlns:a"), a.each(d, function () { e.attr(this.name, this.value) }), b.replaceWith(e) }, "xml") }) } }), a.fn.emotionsRating = function (c) { return this.each(function () { a.data(this, "plugin_emotionsRating") || a.data(this, "plugin_emotionsRating", new b(this, c)) }) }; var f = function (a, b, c = !1) { var d, f = a.length; if (1 == f) d = c ? 0 : e[a[0]]; else { var g = b - 1; d = c ? g > f - 1 ? f - 1 : g : e[a[b - 1]] } return d } })(jQuery, document, window);
